"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ts = require("typescript");
const tslint = require("tslint");
class Rule extends tslint.Rules.AbstractRule {
    apply(sourceFile) {
        return this.applyWithFunction(sourceFile, walk);
    }
}
exports.Rule = Rule;
function walk(ctx) {
    const cb = (node) => {
        if (ts.isBinaryExpression(node)) {
            if (node.operatorToken.kind === ts.SyntaxKind.PlusToken) {
                let identifier;
                if (ts.isIdentifier(node.left)) {
                    identifier = node.left;
                }
                else if (ts.isIdentifier(node.right)) {
                    identifier = node.right;
                }
                if (identifier) {
                    const text = identifier.getText();
                    if (text === '__dirname' || text === '__filename') {
                        ctx.addFailureAtNode(node, 'Use path.join() or path.resolve() instead of `+` to join paths.');
                    }
                }
            }
        }
        return ts.forEachChild(node, cb);
    };
    return ts.forEachChild(ctx.sourceFile, cb);
}
