import * as path from 'path'
import * as ts from 'typescript'
import * as fg from 'fast-glob'
import { Test } from 'tslint'

const testDirectories = fg
  .sync(path.join(__dirname, 'rules', '**', 'tslint.json'))
  .map(dir => path.dirname(dir as string))

beforeAll(() => {
  const cwd = process.cwd()
  process.chdir(__dirname)

  const options: ts.CompilerOptions = {
    module: ts.ModuleKind.CommonJS,
    target: ts.ScriptTarget.ES2015,
    outDir: path.resolve(__dirname, '..', 'dist')
  }

  ts.createProgram(
    fg.sync(path.join('..', 'src', '*.ts')),
    options,
    ts.createCompilerHost(options)
  ).emit()

  process.chdir(cwd)
})

testDirectories.forEach(testDirectory => {
  test(path.basename(testDirectory), () => {
    const { results } = Test.runTest(
      testDirectory,
      path.join(__dirname, '..', 'dist')
    )
    Object
      .keys(results)
      .map(filename => results[filename])
      .filter((result): result is Test.TestOutput => !result.skipped)
      .forEach(result => {
        expect(result.markupFromLinter).toBe(result.markupFromMarkup)
        expect(result.fixesFromLinter).toBe(result.fixesFromMarkup)
      })
  })
})
